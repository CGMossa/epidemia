// Generated by rstantools.  Do not edit by hand.

/*
    epidemia is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    epidemia is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with epidemia.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_pp_base_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_pp_base");
    reader.add_event(1, 1, "include", "functions/reverse.stan");
    reader.add_event(1, 0, "start", "functions/reverse.stan");
    reader.add_event(10, 9, "end", "functions/reverse.stan");
    reader.add_event(10, 2, "restart", "model_pp_base");
    reader.add_event(13, 5, "include", "data/data_indices.stan");
    reader.add_event(13, 0, "start", "data/data_indices.stan");
    reader.add_event(23, 10, "end", "data/data_indices.stan");
    reader.add_event(23, 6, "restart", "model_pp_base");
    reader.add_event(23, 6, "include", "data/data_model.stan");
    reader.add_event(23, 0, "start", "data/data_model.stan");
    reader.add_event(34, 11, "end", "data/data_model.stan");
    reader.add_event(34, 7, "restart", "model_pp_base");
    reader.add_event(39, 12, "include", "tdata/tdata_reverse.stan");
    reader.add_event(39, 0, "start", "tdata/tdata_reverse.stan");
    reader.add_event(43, 4, "end", "tdata/tdata_reverse.stan");
    reader.add_event(43, 13, "restart", "model_pp_base");
    reader.add_event(57, 27, "include", "/tparameters/infections_rt.stan");
    reader.add_event(57, 0, "start", "/tparameters/infections_rt.stan");
    reader.add_event(60, 3, "end", "/tparameters/infections_rt.stan");
    reader.add_event(60, 28, "restart", "model_pp_base");
    reader.add_event(65, 33, "include", "/tparameters/gen_infections.stan");
    reader.add_event(65, 0, "start", "/tparameters/gen_infections.stan");
    reader.add_event(91, 26, "end", "/tparameters/gen_infections.stan");
    reader.add_event(91, 34, "restart", "model_pp_base");
    reader.add_event(107, 48, "end", "model_pp_base");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
reverse(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& vec, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(vec));
        current_statement_begin__ = 4;
        validate_non_negative_index("rev", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev(K);
        stan::math::initialize(rev, DUMMY_VAR__);
        stan::math::fill(rev, DUMMY_VAR__);
        current_statement_begin__ = 5;
        for (int k = 1; k <= K; ++k) {
            current_statement_begin__ = 6;
            stan::model::assign(rev, 
                        stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                        get_base1(vec, ((K - k) + 1), "vec", 1), 
                        "assigning variable rev");
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(rev);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct reverse_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& vec, std::ostream* pstream__) const {
        return reverse(vec, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_pp_base : public prob_grad {
private:
        int M;
        int N0;
        std::vector<int> starts;
        std::vector<int> NC;
        int N2;
        int NS;
        int R;
        double r0;
        vector_d prior_mean_for_phi;
        vector_d prior_scale_for_phi;
        double prior_scale_for_tau;
        std::vector<vector_d> pvecs;
        vector_d pop;
        vector_d si;
        int N;
        matrix_d means;
        vector_d si_rev;
        std::vector<vector_d> pvecs_rev;
public:
    model_pp_base(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_pp_base(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_pp_base_namespace::model_pp_base";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N0", N0, 1);
            current_statement_begin__ = 17;
            validate_non_negative_index("starts", "M", M);
            context__.validate_dims("data initialization", "starts", "int", context__.to_vec(M));
            starts = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("starts");
            pos__ = 0;
            size_t starts_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < starts_k_0_max__; ++k_0__) {
                starts[k_0__] = vals_i__[pos__++];
            }
            size_t starts_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < starts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "starts[i_0__]", starts[i_0__], 1);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("NC", "M", M);
            context__.validate_dims("data initialization", "NC", "int", context__.to_vec(M));
            NC = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("NC");
            pos__ = 0;
            size_t NC_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < NC_k_0_max__; ++k_0__) {
                NC[k_0__] = vals_i__[pos__++];
            }
            size_t NC_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < NC_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "NC[i_0__]", NC[i_0__], 1);
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N2", N2, 1);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "NS", "int", context__.to_vec());
            NS = int(0);
            vals_i__ = context__.vals_i("NS");
            pos__ = 0;
            NS = vals_i__[pos__++];
            check_greater_or_equal(function__, "NS", NS, 1);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "r0", "double", context__.to_vec());
            r0 = double(0);
            vals_r__ = context__.vals_r("r0");
            pos__ = 0;
            r0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "r0", r0, 0);
            current_statement_begin__ = 26;
            validate_non_negative_index("prior_mean_for_phi", "R", R);
            context__.validate_dims("data initialization", "prior_mean_for_phi", "vector_d", context__.to_vec(R));
            prior_mean_for_phi = Eigen::Matrix<double, Eigen::Dynamic, 1>(R);
            vals_r__ = context__.vals_r("prior_mean_for_phi");
            pos__ = 0;
            size_t prior_mean_for_phi_j_1_max__ = R;
            for (size_t j_1__ = 0; j_1__ < prior_mean_for_phi_j_1_max__; ++j_1__) {
                prior_mean_for_phi(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("prior_scale_for_phi", "R", R);
            context__.validate_dims("data initialization", "prior_scale_for_phi", "vector_d", context__.to_vec(R));
            prior_scale_for_phi = Eigen::Matrix<double, Eigen::Dynamic, 1>(R);
            vals_r__ = context__.vals_r("prior_scale_for_phi");
            pos__ = 0;
            size_t prior_scale_for_phi_j_1_max__ = R;
            for (size_t j_1__ = 0; j_1__ < prior_scale_for_phi_j_1_max__; ++j_1__) {
                prior_scale_for_phi(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "prior_scale_for_phi", prior_scale_for_phi, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "prior_scale_for_tau", "double", context__.to_vec());
            prior_scale_for_tau = double(0);
            vals_r__ = context__.vals_r("prior_scale_for_tau");
            pos__ = 0;
            prior_scale_for_tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_scale_for_tau", prior_scale_for_tau, 0);
            current_statement_begin__ = 29;
            validate_non_negative_index("pvecs", "NS", NS);
            validate_non_negative_index("pvecs", "R", R);
            context__.validate_dims("data initialization", "pvecs", "vector_d", context__.to_vec(R,NS));
            pvecs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(R, Eigen::Matrix<double, Eigen::Dynamic, 1>(NS));
            vals_r__ = context__.vals_r("pvecs");
            pos__ = 0;
            size_t pvecs_j_1_max__ = NS;
            size_t pvecs_k_0_max__ = R;
            for (size_t j_1__ = 0; j_1__ < pvecs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pvecs_k_0_max__; ++k_0__) {
                    pvecs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            size_t pvecs_i_0_max__ = R;
            for (size_t i_0__ = 0; i_0__ < pvecs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pvecs[i_0__]", pvecs[i_0__], 0);
                check_less_or_equal(function__, "pvecs[i_0__]", pvecs[i_0__], 1);
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("pop", "M", M);
            context__.validate_dims("data initialization", "pop", "vector_d", context__.to_vec(M));
            pop = Eigen::Matrix<double, Eigen::Dynamic, 1>(M);
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < pop_j_1_max__; ++j_1__) {
                pop(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "pop", pop, 0);
            current_statement_begin__ = 31;
            validate_non_negative_index("si", "NS", NS);
            context__.validate_dims("data initialization", "si", "vector_d", context__.to_vec(NS));
            si = Eigen::Matrix<double, Eigen::Dynamic, 1>(NS);
            vals_r__ = context__.vals_r("si");
            pos__ = 0;
            size_t si_j_1_max__ = NS;
            for (size_t j_1__ = 0; j_1__ < si_j_1_max__; ++j_1__) {
                si(j_1__) = vals_r__[pos__++];
            }
            stan::math::check_simplex(function__, "si", si);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 36;
            validate_non_negative_index("means", "M", M);
            validate_non_negative_index("means", "R", R);
            context__.validate_dims("data initialization", "means", "matrix_d", context__.to_vec(M,R));
            means = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, R);
            vals_r__ = context__.vals_r("means");
            pos__ = 0;
            size_t means_j_2_max__ = R;
            size_t means_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < means_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < means_j_1_max__; ++j_1__) {
                    means(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "means", means, 0);
            check_less_or_equal(function__, "means", means, 1);
            // initialize transformed data variables
            current_statement_begin__ = 41;
            validate_non_negative_index("si_rev", "NS", NS);
            si_rev = Eigen::Matrix<double, Eigen::Dynamic, 1>(NS);
            stan::math::fill(si_rev, DUMMY_VAR__);
            stan::math::assign(si_rev,reverse(si, pstream__));
            current_statement_begin__ = 42;
            validate_non_negative_index("pvecs_rev", "NS", NS);
            validate_non_negative_index("pvecs_rev", "R", R);
            pvecs_rev = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(R, Eigen::Matrix<double, Eigen::Dynamic, 1>(NS));
            stan::math::fill(pvecs_rev, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 45;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 46;
                stan::model::assign(pvecs_rev, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            reverse(get_base1(pvecs, r, "pvecs", 1), pstream__), 
                            "assigning variable pvecs_rev");
            }
            // validate transformed data
            current_statement_begin__ = 41;
            stan::math::check_simplex(function__, "si_rev", si_rev);
            current_statement_begin__ = 42;
            size_t pvecs_rev_i_0_max__ = R;
            for (size_t i_0__ = 0; i_0__ < pvecs_rev_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pvecs_rev[i_0__]", pvecs_rev[i_0__], 0);
                check_less_or_equal(function__, "pvecs_rev[i_0__]", pvecs_rev[i_0__], 1);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 50;
            validate_non_negative_index("y", "(M + 1)", (M + 1));
            num_params_r__ += (M + 1);
            current_statement_begin__ = 51;
            validate_non_negative_index("phi", "(R + 1)", (R + 1));
            num_params_r__ += (1 * (R + 1));
            current_statement_begin__ = 52;
            validate_non_negative_index("noise", "(M + 1)", (M + 1));
            validate_non_negative_index("noise", "R", R);
            num_params_r__ += ((M + 1) * R);
            current_statement_begin__ = 53;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_pp_base() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 50;
        if (!(context__.contains_r("y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        validate_non_negative_index("y", "(M + 1)", (M + 1));
        context__.validate_dims("parameter initialization", "y", "vector_d", context__.to_vec((M + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> y((M + 1));
        size_t y_j_1_max__ = (M + 1);
        for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
            y(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, y);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "(R + 1)", (R + 1));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec((R + 1)));
        std::vector<double> phi((R + 1), double(0));
        size_t phi_k_0_max__ = (R + 1);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = (R + 1);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("noise");
        pos__ = 0U;
        validate_non_negative_index("noise", "(M + 1)", (M + 1));
        validate_non_negative_index("noise", "R", R);
        context__.validate_dims("parameter initialization", "noise", "matrix_d", context__.to_vec((M + 1),R));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> noise((M + 1), R);
        size_t noise_j_2_max__ = R;
        size_t noise_j_1_max__ = (M + 1);
        for (size_t j_2__ = 0; j_2__ < noise_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                noise(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, noise);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable noise: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y;
            (void) y;  // dummy to suppress unused var warning
            if (jacobian__)
                y = in__.vector_lb_constrain(0, (M + 1), lp__);
            else
                y = in__.vector_lb_constrain(0, (M + 1));
            current_statement_begin__ = 51;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = (R + 1);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> noise;
            (void) noise;  // dummy to suppress unused var warning
            if (jacobian__)
                noise = in__.matrix_lb_constrain(0, (M + 1), R, lp__);
            else
                noise = in__.matrix_lb_constrain(0, (M + 1), R);
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(N, lp__);
            else
                eta = in__.vector_constrain(N);
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y");
        names__.push_back("phi");
        names__.push_back("noise");
        names__.push_back("eta");
        names__.push_back("pred");
        names__.push_back("Rt_unadj");
        names__.push_back("Rt");
        names__.push_back("infections");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((M + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((R + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((M + 1));
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_pp_base_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> y = in__.vector_lb_constrain(0, (M + 1));
        size_t y_j_1_max__ = (M + 1);
        for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
            vars__.push_back(y(j_1__));
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = (R + 1);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = (R + 1);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> noise = in__.matrix_lb_constrain(0, (M + 1), R);
        size_t noise_j_2_max__ = R;
        size_t noise_j_1_max__ = (M + 1);
        for (size_t j_2__ = 0; j_2__ < noise_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                vars__.push_back(noise(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 57;
            validate_non_negative_index("pred", "N2", N2);
            validate_non_negative_index("pred", "M", M);
            validate_non_negative_index("pred", "R", R);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > pred(R, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, M));
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("Rt_unadj", "N2", N2);
            validate_non_negative_index("Rt_unadj", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt_unadj(N2, M);
            stan::math::initialize(Rt_unadj, DUMMY_VAR__);
            stan::math::fill(Rt_unadj, DUMMY_VAR__);
            stan::math::assign(Rt_unadj,rep_matrix(0, N2, M));
            current_statement_begin__ = 59;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt(N2, M);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0, N2, M));
            current_statement_begin__ = 60;
            validate_non_negative_index("infections", "N2", N2);
            validate_non_negative_index("infections", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> infections(N2, M);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            stan::math::assign(infections,rep_matrix(0, N2, M));
            // generated quantities statements
            current_statement_begin__ = 63;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 64;
                stan::model::assign(pred, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            rep_matrix(0, N2, M), 
                            "assigning variable pred");
            }
            {
            current_statement_begin__ = 67;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,1);
            current_statement_begin__ = 68;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cumm_sum(N2, M);
            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum, DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0, N2, M));
            current_statement_begin__ = 69;
            for (int m = 1; m <= M; ++m) {
                {
                current_statement_begin__ = 71;
                int n0(0);
                (void) n0;  // dummy to suppress unused var warning
                stan::math::fill(n0, std::numeric_limits<int>::min());
                stan::math::assign(n0,get_base1(starts, m, "starts", 1));
                current_statement_begin__ = 72;
                int n1(0);
                (void) n1;  // dummy to suppress unused var warning
                stan::math::fill(n1, std::numeric_limits<int>::min());
                stan::math::assign(n1,((n0 + N0) - 1));
                current_statement_begin__ = 73;
                int n2(0);
                (void) n2;  // dummy to suppress unused var warning
                stan::math::fill(n2, std::numeric_limits<int>::min());
                stan::math::assign(n2,((n0 + get_base1(NC, m, "NC", 1)) - 1));
                current_statement_begin__ = 76;
                stan::model::assign(Rt_unadj, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n2), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            multiply((r0 * 2), inv_logit(minus(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_min_max(idx, ((idx + get_base1(NC, m, "NC", 1)) - 1)), stan::model::nil_index_list()), "eta")))), 
                            "assigning variable Rt_unadj");
                current_statement_begin__ = 77;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt_unadj, stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "Rt_unadj"), 
                            "assigning variable Rt");
                current_statement_begin__ = 78;
                stan::math::assign(idx, (idx + get_base1(NC, m, "NC", 1)));
                current_statement_begin__ = 80;
                stan::model::assign(infections, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y, m, "y", 1), N0), 
                            "assigning variable infections");
                current_statement_begin__ = 81;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "infections")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 83;
                for (int i = (n1 + 1); i <= n2; ++i) {
                    {
                    current_statement_begin__ = 84;
                    local_scalar_t__ convolution(DUMMY_VAR__);
                    (void) convolution;  // dummy to suppress unused var warning
                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution, DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(infections, n0, m, (i - n0)), tail(si_rev, (i - n0))));
                    current_statement_begin__ = 85;
                    stan::model::assign(infections, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                ((get_base1(pop, m, "pop", 1) - get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1)) * (1 - stan::math::exp(((-(get_base1(Rt_unadj, i, m, "Rt_unadj", 1)) * convolution) / get_base1(pop, m, "pop", 1))))), 
                                "assigning variable infections");
                    current_statement_begin__ = 86;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (((get_base1(pop, m, "pop", 1) - get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1)) * get_base1(Rt_unadj, i, m, "Rt_unadj", 1)) / get_base1(pop, m, "pop", 1)), 
                                "assigning variable Rt");
                    current_statement_begin__ = 87;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1) + get_base1(infections, i, m, "infections", 1)), 
                                "assigning variable cumm_sum");
                    }
                }
                }
            }
            }
            current_statement_begin__ = 94;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 95;
                for (int m = 1; m <= M; ++m) {
                    {
                    current_statement_begin__ = 96;
                    int n0(0);
                    (void) n0;  // dummy to suppress unused var warning
                    stan::math::fill(n0, std::numeric_limits<int>::min());
                    stan::math::assign(n0,get_base1(starts, m, "starts", 1));
                    current_statement_begin__ = 97;
                    int n1(0);
                    (void) n1;  // dummy to suppress unused var warning
                    stan::math::fill(n1, std::numeric_limits<int>::min());
                    stan::math::assign(n1,((n0 + get_base1(NC, m, "NC", 1)) - 1));
                    current_statement_begin__ = 98;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(n0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()))), 
                                (1e-15 * get_base1(infections, n0, m, "infections", 1)), 
                                "assigning variable pred");
                    current_statement_begin__ = 99;
                    for (int i = (n0 + 1); i <= n1; ++i) {
                        current_statement_begin__ = 100;
                        stan::model::assign(pred, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()))), 
                                    ((get_base1(noise, m, r, "noise", 1) * get_base1(means, m, r, "means", 1)) * dot_product(sub_col(infections, n0, m, (i - n0)), tail(get_base1(pvecs_rev, r, "pvecs_rev", 1), (i - n0)))), 
                                    "assigning variable pred");
                        current_statement_begin__ = 101;
                        stan::model::assign(pred, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()))), 
                                    neg_binomial_2_rng(get_base1(get_base1(pred, r, "pred", 1), i, m, "pred", 2), get_base1(phi, r, "phi", 1), base_rng__), 
                                    "assigning variable pred");
                    }
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 57;
            size_t pred_j_2_max__ = M;
            size_t pred_j_1_max__ = N2;
            size_t pred_k_0_max__ = R;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                        vars__.push_back(pred[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 58;
            check_greater_or_equal(function__, "Rt_unadj", Rt_unadj, 0);
            size_t Rt_unadj_j_2_max__ = M;
            size_t Rt_unadj_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_unadj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_unadj_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt_unadj(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 59;
            check_greater_or_equal(function__, "Rt", Rt, 0);
            size_t Rt_j_2_max__ = M;
            size_t Rt_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 60;
            check_greater_or_equal(function__, "infections", infections, 0);
            size_t infections_j_2_max__ = M;
            size_t infections_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < infections_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                    vars__.push_back(infections(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_pp_base";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t y_j_1_max__ = (M + 1);
        for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = (R + 1);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t noise_j_2_max__ = R;
        size_t noise_j_1_max__ = (M + 1);
        for (size_t j_2__ = 0; j_2__ < noise_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t pred_j_2_max__ = M;
        size_t pred_j_1_max__ = N2;
        size_t pred_k_0_max__ = R;
        for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t Rt_unadj_j_2_max__ = M;
        size_t Rt_unadj_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_unadj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_unadj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt_unadj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t infections_j_2_max__ = M;
        size_t infections_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < infections_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t y_j_1_max__ = (M + 1);
        for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = (R + 1);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t noise_j_2_max__ = R;
        size_t noise_j_1_max__ = (M + 1);
        for (size_t j_2__ = 0; j_2__ < noise_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t pred_j_2_max__ = M;
        size_t pred_j_1_max__ = N2;
        size_t pred_k_0_max__ = R;
        for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t Rt_unadj_j_2_max__ = M;
        size_t Rt_unadj_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_unadj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_unadj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt_unadj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t infections_j_2_max__ = M;
        size_t infections_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < infections_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_pp_base_namespace::model_pp_base stan_model;
#endif
