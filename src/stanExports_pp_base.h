// Generated by rstantools.  Do not edit by hand.

/*
    EpiBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_pp_base_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_pp_base");
    reader.add_event(98, 96, "end", "model_pp_base");
    return reader;
}
#include <stan_meta_header.hpp>
class model_pp_base : public prob_grad {
private:
        int M;
        int N0;
        std::vector<int> starts;
        int N;
        std::vector<int> NC;
        int N2;
        int NS;
        int R;
        matrix_d P;
        matrix_d means;
        std::vector<double> pop;
        std::vector<double> SI;
        vector_d SI_rev;
        std::vector<vector_d> P_rev;
public:
    model_pp_base(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_pp_base(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_pp_base_namespace::model_pp_base";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N0", N0, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("starts", "M", M);
            context__.validate_dims("data initialization", "starts", "int", context__.to_vec(M));
            starts = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("starts");
            pos__ = 0;
            size_t starts_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < starts_k_0_max__; ++k_0__) {
                starts[k_0__] = vals_i__[pos__++];
            }
            size_t starts_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < starts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "starts[i_0__]", starts[i_0__], 1);
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 6;
            validate_non_negative_index("NC", "M", M);
            context__.validate_dims("data initialization", "NC", "int", context__.to_vec(M));
            NC = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("NC");
            pos__ = 0;
            size_t NC_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < NC_k_0_max__; ++k_0__) {
                NC[k_0__] = vals_i__[pos__++];
            }
            size_t NC_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < NC_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "NC[i_0__]", NC[i_0__], 1);
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N2", N2, 1);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "NS", "int", context__.to_vec());
            NS = int(0);
            vals_i__ = context__.vals_i("NS");
            pos__ = 0;
            NS = vals_i__[pos__++];
            check_greater_or_equal(function__, "NS", NS, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("P", "NS", NS);
            validate_non_negative_index("P", "R", R);
            context__.validate_dims("data initialization", "P", "matrix_d", context__.to_vec(NS,R));
            P = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NS, R);
            vals_r__ = context__.vals_r("P");
            pos__ = 0;
            size_t P_j_2_max__ = R;
            size_t P_j_1_max__ = NS;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    P(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("means", "M", M);
            validate_non_negative_index("means", "R", R);
            context__.validate_dims("data initialization", "means", "matrix_d", context__.to_vec(M,R));
            means = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, R);
            vals_r__ = context__.vals_r("means");
            pos__ = 0;
            size_t means_j_2_max__ = R;
            size_t means_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < means_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < means_j_1_max__; ++j_1__) {
                    means(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("pop", "M", M);
            context__.validate_dims("data initialization", "pop", "double", context__.to_vec(M));
            pop = std::vector<double>(M, double(0));
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("SI", "NS", NS);
            context__.validate_dims("data initialization", "SI", "double", context__.to_vec(NS));
            SI = std::vector<double>(NS, double(0));
            vals_r__ = context__.vals_r("SI");
            pos__ = 0;
            size_t SI_k_0_max__ = NS;
            for (size_t k_0__ = 0; k_0__ < SI_k_0_max__; ++k_0__) {
                SI[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 17;
            validate_non_negative_index("SI_rev", "NS", NS);
            SI_rev = Eigen::Matrix<double, Eigen::Dynamic, 1>(NS);
            stan::math::fill(SI_rev, DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("P_rev", "NS", NS);
            validate_non_negative_index("P_rev", "M", M);
            P_rev = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(M, Eigen::Matrix<double, Eigen::Dynamic, 1>(NS));
            stan::math::fill(P_rev, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 20;
            for (int i = 1; i <= NS; ++i) {
                current_statement_begin__ = 21;
                stan::model::assign(SI_rev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(SI, ((NS - i) + 1), "SI", 1), 
                            "assigning variable SI_rev");
            }
            current_statement_begin__ = 23;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 24;
                for (int i = 1; i <= NS; ++i) {
                    current_statement_begin__ = 25;
                    stan::model::assign(P_rev, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(P, ((N2 - i) + 1), m, "P", 1), 
                                "assigning variable P_rev");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            validate_non_negative_index("mu", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 32;
            validate_non_negative_index("y", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            validate_non_negative_index("noise", "M", M);
            validate_non_negative_index("noise", "R", R);
            num_params_r__ += ((1 * M) * R);
            current_statement_begin__ = 35;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_pp_base() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "M", M);
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec(M));
        std::vector<double> mu(M, double(0));
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            mu[k_0__] = vals_r__[pos__++];
        }
        size_t mu_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < mu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        validate_non_negative_index("y", "M", M);
        context__.validate_dims("parameter initialization", "y", "double", context__.to_vec(M));
        std::vector<double> y(M, double(0));
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            y[k_0__] = vals_r__[pos__++];
        }
        size_t y_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, y[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("noise");
        pos__ = 0U;
        validate_non_negative_index("noise", "M", M);
        validate_non_negative_index("noise", "R", R);
        context__.validate_dims("parameter initialization", "noise", "double", context__.to_vec(M,R));
        std::vector<std::vector<double> > noise(M, std::vector<double>(R, double(0)));
        size_t noise_k_0_max__ = M;
        size_t noise_k_1_max__ = R;
        for (size_t k_1__ = 0; k_1__ < noise_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < noise_k_0_max__; ++k_0__) {
                noise[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t noise_i_0_max__ = M;
        size_t noise_i_1_max__ = R;
        for (size_t i_0__ = 0; i_0__ < noise_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < noise_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lb_unconstrain(0, noise[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable noise: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            std::vector<local_scalar_t__> mu;
            size_t mu_d_0_max__ = M;
            mu.reserve(mu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 32;
            std::vector<local_scalar_t__> y;
            size_t y_d_0_max__ = M;
            y.reserve(y_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    y.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 33;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 34;
            std::vector<std::vector<local_scalar_t__> > noise;
            size_t noise_d_0_max__ = M;
            size_t noise_d_1_max__ = R;
            noise.resize(noise_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < noise_d_0_max__; ++d_0__) {
                noise[d_0__].reserve(noise_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < noise_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        noise[d_0__].push_back(in__.scalar_lb_constrain(0, lp__));
                    else
                        noise[d_0__].push_back(in__.scalar_lb_constrain(0));
                }
            }
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(N, lp__);
            else
                eta = in__.vector_constrain(N);
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("y");
        names__.push_back("phi");
        names__.push_back("noise");
        names__.push_back("eta");
        names__.push_back("R0_vec");
        names__.push_back("Rt_vec");
        names__.push_back("Rt");
        names__.push_back("prediction");
        names__.push_back("E_obs");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_pp_base_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> mu;
        size_t mu_d_0_max__ = M;
        mu.reserve(mu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        std::vector<double> y;
        size_t y_d_0_max__ = M;
        y.reserve(y_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
            y.push_back(in__.scalar_lb_constrain(0));
        }
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            vars__.push_back(y[k_0__]);
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        std::vector<std::vector<double> > noise;
        size_t noise_d_0_max__ = M;
        size_t noise_d_1_max__ = R;
        noise.resize(noise_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < noise_d_0_max__; ++d_0__) {
            noise[d_0__].reserve(noise_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < noise_d_1_max__; ++d_1__) {
                noise[d_0__].push_back(in__.scalar_lb_constrain(0));
            }
        }
        size_t noise_k_0_max__ = M;
        size_t noise_k_1_max__ = R;
        for (size_t k_1__ = 0; k_1__ < noise_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < noise_k_0_max__; ++k_0__) {
                vars__.push_back(noise[k_0__][k_1__]);
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 39;
            validate_non_negative_index("R0_vec", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R0_vec(N);
            stan::math::initialize(R0_vec, DUMMY_VAR__);
            stan::math::fill(R0_vec, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("Rt_vec", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Rt_vec(N);
            stan::math::initialize(Rt_vec, DUMMY_VAR__);
            stan::math::fill(Rt_vec, DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt(N2, M);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0, N2, M));
            current_statement_begin__ = 42;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prediction(N2, M);
            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction, DUMMY_VAR__);
            stan::math::assign(prediction,rep_matrix(0, N2, M));
            current_statement_begin__ = 43;
            validate_non_negative_index("E_obs", "N2", N2);
            validate_non_negative_index("E_obs", "M", M);
            validate_non_negative_index("E_obs", "R", R);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > E_obs(R, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, M));
            stan::math::initialize(E_obs, DUMMY_VAR__);
            stan::math::fill(E_obs, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 46;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 47;
                stan::model::assign(E_obs, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            rep_matrix(0, N2, M), 
                            "assigning variable E_obs");
            }
            {
            current_statement_begin__ = 50;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,(get_base1(NC, 1, "NC", 1) + 1));
            current_statement_begin__ = 51;
            stan::model::assign(R0_vec, 
                        stan::model::cons_list(stan::model::index_min_max(1, get_base1(NC, 1, "NC", 1)), stan::model::nil_index_list()), 
                        rep_vector(get_base1(mu, 1, "mu", 1), get_base1(NC, 1, "NC", 1)), 
                        "assigning variable R0_vec");
            current_statement_begin__ = 52;
            for (int m = 2; m <= M; ++m) {
                current_statement_begin__ = 53;
                stan::model::assign(R0_vec, 
                            stan::model::cons_list(stan::model::index_min_max(idx, ((idx + get_base1(NC, m, "NC", 1)) - 1)), stan::model::nil_index_list()), 
                            rep_vector(get_base1(mu, m, "mu", 1), get_base1(NC, m, "NC", 1)), 
                            "assigning variable R0_vec");
                current_statement_begin__ = 54;
                stan::math::assign(idx, (idx + get_base1(NC, m, "NC", 1)));
            }
            }
            current_statement_begin__ = 59;
            stan::math::assign(Rt_vec, elt_multiply(multiply(R0_vec, 2.0), inv_logit(minus(eta))));
            {
            current_statement_begin__ = 62;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,1);
            current_statement_begin__ = 63;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cumm_sum(N2, M);
            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum, DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0, N2, M));
            current_statement_begin__ = 64;
            for (int m = 1; m <= M; ++m) {
                {
                current_statement_begin__ = 66;
                int n0(0);
                (void) n0;  // dummy to suppress unused var warning
                stan::math::fill(n0, std::numeric_limits<int>::min());
                stan::math::assign(n0,get_base1(starts, m, "starts", 1));
                current_statement_begin__ = 67;
                int n1(0);
                (void) n1;  // dummy to suppress unused var warning
                stan::math::fill(n1, std::numeric_limits<int>::min());
                stan::math::assign(n1,((n0 + N0) - 1));
                current_statement_begin__ = 68;
                int n2(0);
                (void) n2;  // dummy to suppress unused var warning
                stan::math::fill(n2, std::numeric_limits<int>::min());
                stan::math::assign(n2,((n0 + get_base1(NC, m, "NC", 1)) - 1));
                current_statement_begin__ = 71;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n2), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt_vec, stan::model::cons_list(stan::model::index_min_max(idx, ((idx + get_base1(NC, m, "NC", 1)) - 1)), stan::model::nil_index_list()), "Rt_vec"), 
                            "assigning variable Rt");
                current_statement_begin__ = 72;
                stan::math::assign(idx, (idx + get_base1(NC, m, "NC", 1)));
                current_statement_begin__ = 74;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y, m, "y", 1), N0), 
                            "assigning variable prediction");
                current_statement_begin__ = 75;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(n0, n1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "prediction")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 77;
                for (int i = (n1 + 1); i <= n2; ++i) {
                    {
                    current_statement_begin__ = 78;
                    local_scalar_t__ convolution(DUMMY_VAR__);
                    (void) convolution;  // dummy to suppress unused var warning
                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution, DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(prediction, n0, m, (i - n0)), tail(SI_rev, (i - n0))));
                    current_statement_begin__ = 79;
                    stan::model::assign(prediction, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                ((get_base1(pop, m, "pop", 1) - get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1)) * (1 - stan::math::exp(((-(get_base1(Rt, i, m, "Rt", 1)) * convolution) / get_base1(pop, m, "pop", 1))))), 
                                "assigning variable prediction");
                    current_statement_begin__ = 80;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1) + get_base1(prediction, i, m, "prediction", 1)), 
                                "assigning variable cumm_sum");
                    }
                }
                }
            }
            }
            current_statement_begin__ = 86;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 87;
                for (int m = 1; m <= M; ++m) {
                    {
                    current_statement_begin__ = 88;
                    int n0(0);
                    (void) n0;  // dummy to suppress unused var warning
                    stan::math::fill(n0, std::numeric_limits<int>::min());
                    stan::math::assign(n0,get_base1(starts, m, "starts", 1));
                    current_statement_begin__ = 89;
                    int n1(0);
                    (void) n1;  // dummy to suppress unused var warning
                    stan::math::fill(n1, std::numeric_limits<int>::min());
                    stan::math::assign(n1,((n0 + get_base1(NC, m, "NC", 1)) - 1));
                    current_statement_begin__ = 90;
                    stan::model::assign(E_obs, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(n0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()))), 
                                (1e-15 * get_base1(prediction, n0, m, "prediction", 1)), 
                                "assigning variable E_obs");
                    current_statement_begin__ = 91;
                    for (int i = (n0 + 1); i <= n1; ++i) {
                        current_statement_begin__ = 92;
                        stan::model::assign(E_obs, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()))), 
                                    ((get_base1(get_base1(noise, m, "noise", 1), r, "noise", 2) * get_base1(means, m, r, "means", 1)) * dot_product(sub_col(prediction, n0, m, (i - n0)), tail(get_base1(P_rev, r, "P_rev", 1), (i - n0)))), 
                                    "assigning variable E_obs");
                    }
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 39;
            size_t R0_vec_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R0_vec_j_1_max__; ++j_1__) {
                vars__.push_back(R0_vec(j_1__));
            }
            current_statement_begin__ = 40;
            size_t Rt_vec_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Rt_vec_j_1_max__; ++j_1__) {
                vars__.push_back(Rt_vec(j_1__));
            }
            current_statement_begin__ = 41;
            size_t Rt_j_2_max__ = M;
            size_t Rt_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 42;
            size_t prediction_j_2_max__ = M;
            size_t prediction_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                    vars__.push_back(prediction(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 43;
            size_t E_obs_j_2_max__ = M;
            size_t E_obs_j_1_max__ = N2;
            size_t E_obs_k_0_max__ = R;
            for (size_t j_2__ = 0; j_2__ < E_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_obs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < E_obs_k_0_max__; ++k_0__) {
                        vars__.push_back(E_obs[k_0__](j_1__, j_2__));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_pp_base";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t noise_k_0_max__ = M;
        size_t noise_k_1_max__ = R;
        for (size_t k_1__ = 0; k_1__ < noise_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < noise_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t R0_vec_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < R0_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R0_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_vec_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Rt_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction_j_2_max__ = M;
        size_t prediction_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t E_obs_j_2_max__ = M;
        size_t E_obs_j_1_max__ = N2;
        size_t E_obs_k_0_max__ = R;
        for (size_t j_2__ = 0; j_2__ < E_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_obs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < E_obs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_obs" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t noise_k_0_max__ = M;
        size_t noise_k_1_max__ = R;
        for (size_t k_1__ = 0; k_1__ < noise_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < noise_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t R0_vec_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < R0_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R0_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_vec_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Rt_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction_j_2_max__ = M;
        size_t prediction_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t E_obs_j_2_max__ = M;
        size_t E_obs_j_1_max__ = N2;
        size_t E_obs_k_0_max__ = R;
        for (size_t j_2__ = 0; j_2__ < E_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_obs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < E_obs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_obs" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_pp_base_namespace::model_pp_base stan_model;
#endif
