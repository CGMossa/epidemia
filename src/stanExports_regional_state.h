// Generated by rstantools.  Do not edit by hand.

/*
    ImperialCovidModel is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ImperialCovidModel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ImperialCovidModel.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_regional_state_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_regional_state");
    reader.add_event(122, 120, "end", "model_regional_state");
    return reader;
}
#include <stan_meta_header.hpp>
class model_regional_state : public prob_grad {
private:
        int M;
        int P;
        int P_partial_regional;
        int P_partial_state;
        int N0;
        std::vector<int> N;
        int N2;
        std::vector<std::vector<int> > deaths;
        matrix_d f;
        std::vector<matrix_d> X;
        std::vector<matrix_d> X_partial_regional;
        std::vector<matrix_d> X_partial_state;
        std::vector<int> EpidemicStart;
        std::vector<double> pop;
        int Q;
        std::vector<int> Region;
        std::vector<double> SI;
        int CT_ID;
        int NY_ID;
        int MA_ID;
        int ME_ID;
        int VT_ID;
        int NJ_ID;
        int RI_ID;
        int NH_ID;
        int PA_ID;
        vector_d SI_rev;
        std::vector<vector_d> f_rev;
public:
    model_regional_state(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_regional_state(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_regional_state_namespace::model_regional_state";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "P_partial_regional", "int", context__.to_vec());
            P_partial_regional = int(0);
            vals_i__ = context__.vals_i("P_partial_regional");
            pos__ = 0;
            P_partial_regional = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_partial_regional", P_partial_regional, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "P_partial_state", "int", context__.to_vec());
            P_partial_state = int(0);
            vals_i__ = context__.vals_i("P_partial_state");
            pos__ = 0;
            P_partial_state = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_partial_state", P_partial_state, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N0", N0, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("N", "M", M);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(M));
            N = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                N[k_0__] = vals_i__[pos__++];
            }
            size_t N_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N[i_0__]", N[i_0__], 1);
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N2", N2, 1);
            current_statement_begin__ = 9;
            validate_non_negative_index("deaths", "N2", N2);
            validate_non_negative_index("deaths", "M", M);
            context__.validate_dims("data initialization", "deaths", "int", context__.to_vec(N2,M));
            deaths = std::vector<std::vector<int> >(N2, std::vector<int>(M, int(0)));
            vals_i__ = context__.vals_i("deaths");
            pos__ = 0;
            size_t deaths_k_0_max__ = N2;
            size_t deaths_k_1_max__ = M;
            for (size_t k_1__ = 0; k_1__ < deaths_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < deaths_k_0_max__; ++k_0__) {
                    deaths[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("f", "N2", N2);
            validate_non_negative_index("f", "M", M);
            context__.validate_dims("data initialization", "f", "matrix_d", context__.to_vec(N2,M));
            f = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, M);
            vals_r__ = context__.vals_r("f");
            pos__ = 0;
            size_t f_j_2_max__ = M;
            size_t f_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    f(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("X", "N2", N2);
            validate_non_negative_index("X", "P", P);
            validate_non_negative_index("X", "M", M);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,N2,P));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(M, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, P));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = N2;
            size_t X_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("X_partial_regional", "N2", N2);
            validate_non_negative_index("X_partial_regional", "P_partial_regional", P_partial_regional);
            validate_non_negative_index("X_partial_regional", "M", M);
            context__.validate_dims("data initialization", "X_partial_regional", "matrix_d", context__.to_vec(M,N2,P_partial_regional));
            X_partial_regional = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(M, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, P_partial_regional));
            vals_r__ = context__.vals_r("X_partial_regional");
            pos__ = 0;
            size_t X_partial_regional_j_2_max__ = P_partial_regional;
            size_t X_partial_regional_j_1_max__ = N2;
            size_t X_partial_regional_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_partial_regional_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_partial_regional_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_partial_regional_k_0_max__; ++k_0__) {
                        X_partial_regional[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("X_partial_state", "N2", N2);
            validate_non_negative_index("X_partial_state", "P_partial_state", P_partial_state);
            validate_non_negative_index("X_partial_state", "M", M);
            context__.validate_dims("data initialization", "X_partial_state", "matrix_d", context__.to_vec(M,N2,P_partial_state));
            X_partial_state = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(M, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, P_partial_state));
            vals_r__ = context__.vals_r("X_partial_state");
            pos__ = 0;
            size_t X_partial_state_j_2_max__ = P_partial_state;
            size_t X_partial_state_j_1_max__ = N2;
            size_t X_partial_state_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_partial_state_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_partial_state_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_partial_state_k_0_max__; ++k_0__) {
                        X_partial_state[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("EpidemicStart", "M", M);
            context__.validate_dims("data initialization", "EpidemicStart", "int", context__.to_vec(M));
            EpidemicStart = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("EpidemicStart");
            pos__ = 0;
            size_t EpidemicStart_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < EpidemicStart_k_0_max__; ++k_0__) {
                EpidemicStart[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("pop", "M", M);
            context__.validate_dims("data initialization", "pop", "double", context__.to_vec(M));
            pop = std::vector<double>(M, double(0));
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("Region", "M", M);
            context__.validate_dims("data initialization", "Region", "int", context__.to_vec(M));
            Region = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("Region");
            pos__ = 0;
            size_t Region_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < Region_k_0_max__; ++k_0__) {
                Region[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("SI", "N2", N2);
            context__.validate_dims("data initialization", "SI", "double", context__.to_vec(N2));
            SI = std::vector<double>(N2, double(0));
            vals_r__ = context__.vals_r("SI");
            pos__ = 0;
            size_t SI_k_0_max__ = N2;
            for (size_t k_0__ = 0; k_0__ < SI_k_0_max__; ++k_0__) {
                SI[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "CT_ID", "int", context__.to_vec());
            CT_ID = int(0);
            vals_i__ = context__.vals_i("CT_ID");
            pos__ = 0;
            CT_ID = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "NY_ID", "int", context__.to_vec());
            NY_ID = int(0);
            vals_i__ = context__.vals_i("NY_ID");
            pos__ = 0;
            NY_ID = vals_i__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "MA_ID", "int", context__.to_vec());
            MA_ID = int(0);
            vals_i__ = context__.vals_i("MA_ID");
            pos__ = 0;
            MA_ID = vals_i__[pos__++];
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "ME_ID", "int", context__.to_vec());
            ME_ID = int(0);
            vals_i__ = context__.vals_i("ME_ID");
            pos__ = 0;
            ME_ID = vals_i__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "VT_ID", "int", context__.to_vec());
            VT_ID = int(0);
            vals_i__ = context__.vals_i("VT_ID");
            pos__ = 0;
            VT_ID = vals_i__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "NJ_ID", "int", context__.to_vec());
            NJ_ID = int(0);
            vals_i__ = context__.vals_i("NJ_ID");
            pos__ = 0;
            NJ_ID = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "RI_ID", "int", context__.to_vec());
            RI_ID = int(0);
            vals_i__ = context__.vals_i("RI_ID");
            pos__ = 0;
            RI_ID = vals_i__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "NH_ID", "int", context__.to_vec());
            NH_ID = int(0);
            vals_i__ = context__.vals_i("NH_ID");
            pos__ = 0;
            NH_ID = vals_i__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "PA_ID", "int", context__.to_vec());
            PA_ID = int(0);
            vals_i__ = context__.vals_i("PA_ID");
            pos__ = 0;
            PA_ID = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 31;
            validate_non_negative_index("SI_rev", "N2", N2);
            SI_rev = Eigen::Matrix<double, Eigen::Dynamic, 1>(N2);
            stan::math::fill(SI_rev, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("f_rev", "N2", N2);
            validate_non_negative_index("f_rev", "M", M);
            f_rev = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(M, Eigen::Matrix<double, Eigen::Dynamic, 1>(N2));
            stan::math::fill(f_rev, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 34;
            for (int i = 1; i <= N2; ++i) {
                current_statement_begin__ = 35;
                stan::model::assign(SI_rev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(SI, ((N2 - i) + 1), "SI", 1), 
                            "assigning variable SI_rev");
            }
            current_statement_begin__ = 37;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 38;
                for (int i = 1; i <= N2; ++i) {
                    current_statement_begin__ = 39;
                    stan::model::assign(f_rev, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(f, ((N2 - i) + 1), m, "f", 1), 
                                "assigning variable f_rev");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 45;
            validate_non_negative_index("mu", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 46;
            validate_non_negative_index("alpha", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 47;
            validate_non_negative_index("alpha_region", "P_partial_regional", P_partial_regional);
            validate_non_negative_index("alpha_region", "Q", Q);
            num_params_r__ += (P_partial_regional * Q);
            current_statement_begin__ = 48;
            validate_non_negative_index("alpha_state", "P_partial_state", P_partial_state);
            validate_non_negative_index("alpha_state", "M", M);
            num_params_r__ += (P_partial_state * M);
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 52;
            validate_non_negative_index("y", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            validate_non_negative_index("ifr_noise", "M", M);
            num_params_r__ += (1 * M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_regional_state() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 45;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "M", M);
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec(M));
        std::vector<double> mu(M, double(0));
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            mu[k_0__] = vals_r__[pos__++];
        }
        size_t mu_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < mu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "P", P);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(P);
        size_t alpha_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("alpha_region")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_region missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_region");
        pos__ = 0U;
        validate_non_negative_index("alpha_region", "P_partial_regional", P_partial_regional);
        validate_non_negative_index("alpha_region", "Q", Q);
        context__.validate_dims("parameter initialization", "alpha_region", "vector_d", context__.to_vec(Q,P_partial_regional));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha_region(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(P_partial_regional));
        size_t alpha_region_j_1_max__ = P_partial_regional;
        size_t alpha_region_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < alpha_region_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_region_k_0_max__; ++k_0__) {
                alpha_region[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t alpha_region_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < alpha_region_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(alpha_region[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_region: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("alpha_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_state");
        pos__ = 0U;
        validate_non_negative_index("alpha_state", "P_partial_state", P_partial_state);
        validate_non_negative_index("alpha_state", "M", M);
        context__.validate_dims("parameter initialization", "alpha_state", "vector_d", context__.to_vec(M,P_partial_state));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha_state(M, Eigen::Matrix<double, Eigen::Dynamic, 1>(P_partial_state));
        size_t alpha_state_j_1_max__ = P_partial_state;
        size_t alpha_state_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < alpha_state_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_state_k_0_max__; ++k_0__) {
                alpha_state[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t alpha_state_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < alpha_state_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(alpha_state[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_state: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("gamma_region")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_region missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_region");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma_region", "double", context__.to_vec());
        double gamma_region(0);
        gamma_region = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, gamma_region);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_region: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("gamma_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_state");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma_state", "double", context__.to_vec());
        double gamma_state(0);
        gamma_state = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, gamma_state);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_state: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("kappa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kappa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kappa", "double", context__.to_vec());
        double kappa(0);
        kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, kappa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kappa: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        validate_non_negative_index("y", "M", M);
        context__.validate_dims("parameter initialization", "y", "double", context__.to_vec(M));
        std::vector<double> y(M, double(0));
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            y[k_0__] = vals_r__[pos__++];
        }
        size_t y_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, y[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("ifr_noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ifr_noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ifr_noise");
        pos__ = 0U;
        validate_non_negative_index("ifr_noise", "M", M);
        context__.validate_dims("parameter initialization", "ifr_noise", "double", context__.to_vec(M));
        std::vector<double> ifr_noise(M, double(0));
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            ifr_noise[k_0__] = vals_r__[pos__++];
        }
        size_t ifr_noise_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < ifr_noise_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ifr_noise[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ifr_noise: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 45;
            std::vector<local_scalar_t__> mu;
            size_t mu_d_0_max__ = M;
            mu.reserve(mu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain(P, lp__);
            else
                alpha = in__.vector_constrain(P);
            current_statement_begin__ = 47;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > alpha_region;
            size_t alpha_region_d_0_max__ = Q;
            alpha_region.reserve(alpha_region_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_region_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_region.push_back(in__.vector_constrain(P_partial_regional, lp__));
                else
                    alpha_region.push_back(in__.vector_constrain(P_partial_regional));
            }
            current_statement_begin__ = 48;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > alpha_state;
            size_t alpha_state_d_0_max__ = M;
            alpha_state.reserve(alpha_state_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_state_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_state.push_back(in__.vector_constrain(P_partial_state, lp__));
                else
                    alpha_state.push_back(in__.vector_constrain(P_partial_state));
            }
            current_statement_begin__ = 49;
            local_scalar_t__ gamma_region;
            (void) gamma_region;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_region = in__.scalar_lb_constrain(0, lp__);
            else
                gamma_region = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 50;
            local_scalar_t__ gamma_state;
            (void) gamma_state;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_state = in__.scalar_lb_constrain(0, lp__);
            else
                gamma_state = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 51;
            local_scalar_t__ kappa;
            (void) kappa;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa = in__.scalar_lb_constrain(0, lp__);
            else
                kappa = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 52;
            std::vector<local_scalar_t__> y;
            size_t y_d_0_max__ = M;
            y.reserve(y_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    y.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 53;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 54;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 55;
            std::vector<local_scalar_t__> ifr_noise;
            size_t ifr_noise_d_0_max__ = M;
            ifr_noise.reserve(ifr_noise_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ifr_noise_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ifr_noise.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ifr_noise.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 60;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> prediction(N2, M);
            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction, DUMMY_VAR__);
            stan::math::assign(prediction,rep_matrix(0, N2, M));
            current_statement_begin__ = 61;
            validate_non_negative_index("E_deaths", "N2", N2);
            validate_non_negative_index("E_deaths", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_deaths(N2, M);
            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths, DUMMY_VAR__);
            stan::math::assign(E_deaths,rep_matrix(0, N2, M));
            current_statement_begin__ = 62;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Rt(N2, M);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0, N2, M));
            current_statement_begin__ = 63;
            validate_non_negative_index("Rt_adj", "N2", N2);
            validate_non_negative_index("Rt_adj", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Rt_adj(N2, M);
            stan::math::initialize(Rt_adj, DUMMY_VAR__);
            stan::math::fill(Rt_adj, DUMMY_VAR__);
            stan::math::assign(Rt_adj,Rt);
            // transformed parameters block statements
            {
            current_statement_begin__ = 66;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cumm_sum(N2, M);
            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum, DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0, N2, M));
            current_statement_begin__ = 67;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 68;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y, m, "y", 1), N0), 
                            "assigning variable prediction");
                current_statement_begin__ = 69;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "prediction")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 71;
                if (as_bool(logical_eq(m, CT_ID))) {
                    current_statement_begin__ = 72;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy(stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(NY_ID), stan::model::nil_index_list())), "Rt")), 
                                "assigning variable Rt");
                } else {
                    current_statement_begin__ = 74;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                multiply((get_base1(mu, m, "mu", 1) * 2), inv_logit(subtract(subtract(multiply(minus(get_base1(X, m, "X", 1)), alpha), multiply(get_base1(X_partial_regional, m, "X_partial_regional", 1), get_base1(alpha_region, get_base1(Region, m, "Region", 1), "alpha_region", 1))), multiply(get_base1(X_partial_state, m, "X_partial_state", 1), get_base1(alpha_state, m, "alpha_state", 1))))), 
                                "assigning variable Rt");
                }
                current_statement_begin__ = 76;
                stan::model::assign(Rt_adj, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "Rt"), 
                            "assigning variable Rt_adj");
                current_statement_begin__ = 79;
                for (int i = (N0 + 1); i <= N2; ++i) {
                    {
                    current_statement_begin__ = 80;
                    local_scalar_t__ convolution(DUMMY_VAR__);
                    (void) convolution;  // dummy to suppress unused var warning
                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution, DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(prediction, 1, m, (i - 1)), tail(SI_rev, (i - 1))));
                    current_statement_begin__ = 82;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1) + get_base1(prediction, (i - 1), m, "prediction", 1)), 
                                "assigning variable cumm_sum");
                    current_statement_begin__ = 83;
                    stan::model::assign(Rt_adj, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (((get_base1(pop, m, "pop", 1) - get_base1(cumm_sum, i, m, "cumm_sum", 1)) / get_base1(pop, m, "pop", 1)) * get_base1(Rt, i, m, "Rt", 1)), 
                                "assigning variable Rt_adj");
                    current_statement_begin__ = 84;
                    stan::model::assign(prediction, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(prediction, i, m, "prediction", 1) + (get_base1(Rt_adj, i, m, "Rt_adj", 1) * convolution)), 
                                "assigning variable prediction");
                    }
                }
                current_statement_begin__ = 89;
                stan::model::assign(E_deaths, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            (1e-15 * get_base1(prediction, 1, m, "prediction", 1)), 
                            "assigning variable E_deaths");
                current_statement_begin__ = 90;
                for (int i = 2; i <= N2; ++i) {
                    current_statement_begin__ = 91;
                    stan::model::assign(E_deaths, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(ifr_noise, m, "ifr_noise", 1) * dot_product(sub_col(prediction, 1, m, (i - 1)), tail(get_base1(f_rev, m, "f_rev", 1), (i - 1)))), 
                                "assigning variable E_deaths");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 60;
            size_t prediction_j_1_max__ = N2;
            size_t prediction_j_2_max__ = M;
            for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(prediction(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prediction" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prediction: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 61;
            size_t E_deaths_j_1_max__ = N2;
            size_t E_deaths_j_2_max__ = M;
            for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(E_deaths(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: E_deaths" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E_deaths: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 62;
            size_t Rt_j_1_max__ = N2;
            size_t Rt_j_2_max__ = M;
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Rt(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rt" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 63;
            size_t Rt_adj_j_1_max__ = N2;
            size_t Rt_adj_j_2_max__ = M;
            for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Rt_adj(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rt_adj" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rt_adj: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 98;
            lp_accum__.add(exponential_log<propto__>(tau, 0.03));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(gamma_region, 0, .5));
            current_statement_begin__ = 100;
            lp_accum__.add(normal_log<propto__>(gamma_state, 0, .5));
            current_statement_begin__ = 101;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 102;
                lp_accum__.add(exponential_log<propto__>(get_base1(y, m, "y", 1), (1 / tau)));
            }
            current_statement_begin__ = 104;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 105;
                lp_accum__.add(normal_log<propto__>(get_base1(alpha_region, q, "alpha_region", 1), 0, gamma_region));
            }
            current_statement_begin__ = 107;
            for (int q = 1; q <= M; ++q) {
                current_statement_begin__ = 108;
                lp_accum__.add(normal_log<propto__>(get_base1(alpha_state, q, "alpha_state", 1), 0, gamma_state));
            }
            current_statement_begin__ = 110;
            lp_accum__.add(normal_log<propto__>(phi, 0, 5));
            current_statement_begin__ = 111;
            lp_accum__.add(normal_log<propto__>(kappa, 0, 0.5));
            current_statement_begin__ = 112;
            lp_accum__.add(normal_log<propto__>(mu, 3.28, kappa));
            current_statement_begin__ = 113;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 0.5));
            current_statement_begin__ = 114;
            lp_accum__.add(normal_log<propto__>(ifr_noise, 1, 0.1));
            current_statement_begin__ = 117;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 118;
                lp_accum__.add(neg_binomial_2_log<propto__>(stan::model::rvalue(deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart, m, "EpidemicStart", 1), get_base1(N, m, "N", 1)), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "deaths"), stan::model::rvalue(E_deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart, m, "EpidemicStart", 1), get_base1(N, m, "N", 1)), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "E_deaths"), phi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("alpha");
        names__.push_back("alpha_region");
        names__.push_back("alpha_state");
        names__.push_back("gamma_region");
        names__.push_back("gamma_state");
        names__.push_back("kappa");
        names__.push_back("y");
        names__.push_back("phi");
        names__.push_back("tau");
        names__.push_back("ifr_noise");
        names__.push_back("prediction");
        names__.push_back("E_deaths");
        names__.push_back("Rt");
        names__.push_back("Rt_adj");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(P_partial_regional);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(P_partial_state);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_regional_state_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> mu;
        size_t mu_d_0_max__ = M;
        mu.reserve(mu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain(P);
        size_t alpha_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha_region;
        size_t alpha_region_d_0_max__ = Q;
        alpha_region.reserve(alpha_region_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_region_d_0_max__; ++d_0__) {
            alpha_region.push_back(in__.vector_constrain(P_partial_regional));
        }
        size_t alpha_region_j_1_max__ = P_partial_regional;
        size_t alpha_region_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < alpha_region_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_region_k_0_max__; ++k_0__) {
                vars__.push_back(alpha_region[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha_state;
        size_t alpha_state_d_0_max__ = M;
        alpha_state.reserve(alpha_state_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_state_d_0_max__; ++d_0__) {
            alpha_state.push_back(in__.vector_constrain(P_partial_state));
        }
        size_t alpha_state_j_1_max__ = P_partial_state;
        size_t alpha_state_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < alpha_state_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_state_k_0_max__; ++k_0__) {
                vars__.push_back(alpha_state[k_0__](j_1__));
            }
        }
        double gamma_region = in__.scalar_lb_constrain(0);
        vars__.push_back(gamma_region);
        double gamma_state = in__.scalar_lb_constrain(0);
        vars__.push_back(gamma_state);
        double kappa = in__.scalar_lb_constrain(0);
        vars__.push_back(kappa);
        std::vector<double> y;
        size_t y_d_0_max__ = M;
        y.reserve(y_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
            y.push_back(in__.scalar_lb_constrain(0));
        }
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            vars__.push_back(y[k_0__]);
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        std::vector<double> ifr_noise;
        size_t ifr_noise_d_0_max__ = M;
        ifr_noise.reserve(ifr_noise_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ifr_noise_d_0_max__; ++d_0__) {
            ifr_noise.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            vars__.push_back(ifr_noise[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 60;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prediction(N2, M);
            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction, DUMMY_VAR__);
            stan::math::assign(prediction,rep_matrix(0, N2, M));
            current_statement_begin__ = 61;
            validate_non_negative_index("E_deaths", "N2", N2);
            validate_non_negative_index("E_deaths", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E_deaths(N2, M);
            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths, DUMMY_VAR__);
            stan::math::assign(E_deaths,rep_matrix(0, N2, M));
            current_statement_begin__ = 62;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt(N2, M);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0, N2, M));
            current_statement_begin__ = 63;
            validate_non_negative_index("Rt_adj", "N2", N2);
            validate_non_negative_index("Rt_adj", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt_adj(N2, M);
            stan::math::initialize(Rt_adj, DUMMY_VAR__);
            stan::math::fill(Rt_adj, DUMMY_VAR__);
            stan::math::assign(Rt_adj,Rt);
            // do transformed parameters statements
            {
            current_statement_begin__ = 66;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cumm_sum(N2, M);
            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum, DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0, N2, M));
            current_statement_begin__ = 67;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 68;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y, m, "y", 1), N0), 
                            "assigning variable prediction");
                current_statement_begin__ = 69;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "prediction")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 71;
                if (as_bool(logical_eq(m, CT_ID))) {
                    current_statement_begin__ = 72;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy(stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(NY_ID), stan::model::nil_index_list())), "Rt")), 
                                "assigning variable Rt");
                } else {
                    current_statement_begin__ = 74;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                multiply((get_base1(mu, m, "mu", 1) * 2), inv_logit(subtract(subtract(multiply(minus(get_base1(X, m, "X", 1)), alpha), multiply(get_base1(X_partial_regional, m, "X_partial_regional", 1), get_base1(alpha_region, get_base1(Region, m, "Region", 1), "alpha_region", 1))), multiply(get_base1(X_partial_state, m, "X_partial_state", 1), get_base1(alpha_state, m, "alpha_state", 1))))), 
                                "assigning variable Rt");
                }
                current_statement_begin__ = 76;
                stan::model::assign(Rt_adj, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "Rt"), 
                            "assigning variable Rt_adj");
                current_statement_begin__ = 79;
                for (int i = (N0 + 1); i <= N2; ++i) {
                    {
                    current_statement_begin__ = 80;
                    local_scalar_t__ convolution(DUMMY_VAR__);
                    (void) convolution;  // dummy to suppress unused var warning
                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution, DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(prediction, 1, m, (i - 1)), tail(SI_rev, (i - 1))));
                    current_statement_begin__ = 82;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(cumm_sum, (i - 1), m, "cumm_sum", 1) + get_base1(prediction, (i - 1), m, "prediction", 1)), 
                                "assigning variable cumm_sum");
                    current_statement_begin__ = 83;
                    stan::model::assign(Rt_adj, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (((get_base1(pop, m, "pop", 1) - get_base1(cumm_sum, i, m, "cumm_sum", 1)) / get_base1(pop, m, "pop", 1)) * get_base1(Rt, i, m, "Rt", 1)), 
                                "assigning variable Rt_adj");
                    current_statement_begin__ = 84;
                    stan::model::assign(prediction, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(prediction, i, m, "prediction", 1) + (get_base1(Rt_adj, i, m, "Rt_adj", 1) * convolution)), 
                                "assigning variable prediction");
                    }
                }
                current_statement_begin__ = 89;
                stan::model::assign(E_deaths, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            (1e-15 * get_base1(prediction, 1, m, "prediction", 1)), 
                            "assigning variable E_deaths");
                current_statement_begin__ = 90;
                for (int i = 2; i <= N2; ++i) {
                    current_statement_begin__ = 91;
                    stan::model::assign(E_deaths, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(ifr_noise, m, "ifr_noise", 1) * dot_product(sub_col(prediction, 1, m, (i - 1)), tail(get_base1(f_rev, m, "f_rev", 1), (i - 1)))), 
                                "assigning variable E_deaths");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t prediction_j_2_max__ = M;
                size_t prediction_j_1_max__ = N2;
                for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                        vars__.push_back(prediction(j_1__, j_2__));
                    }
                }
                size_t E_deaths_j_2_max__ = M;
                size_t E_deaths_j_1_max__ = N2;
                for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                        vars__.push_back(E_deaths(j_1__, j_2__));
                    }
                }
                size_t Rt_j_2_max__ = M;
                size_t Rt_j_1_max__ = N2;
                for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                        vars__.push_back(Rt(j_1__, j_2__));
                    }
                }
                size_t Rt_adj_j_2_max__ = M;
                size_t Rt_adj_j_1_max__ = N2;
                for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                        vars__.push_back(Rt_adj(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_regional_state";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_region_j_1_max__ = P_partial_regional;
        size_t alpha_region_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < alpha_region_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_region_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_region" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_state_j_1_max__ = P_partial_state;
        size_t alpha_state_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < alpha_state_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_state_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_state" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma_region";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma_state";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t prediction_j_2_max__ = M;
            size_t prediction_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_deaths_j_2_max__ = M;
            size_t E_deaths_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deaths" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Rt_j_2_max__ = M;
            size_t Rt_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Rt_adj_j_2_max__ = M;
            size_t Rt_adj_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt_adj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_region_j_1_max__ = P_partial_regional;
        size_t alpha_region_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < alpha_region_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_region_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_region" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_state_j_1_max__ = P_partial_state;
        size_t alpha_state_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < alpha_state_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_state_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_state" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma_region";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma_state";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t prediction_j_2_max__ = M;
            size_t prediction_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_deaths_j_2_max__ = M;
            size_t E_deaths_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deaths" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Rt_j_2_max__ = M;
            size_t Rt_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Rt_adj_j_2_max__ = M;
            size_t Rt_adj_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt_adj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_regional_state_namespace::model_regional_state stan_model;
#endif
